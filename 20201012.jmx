<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Base Client Performance Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV DataSet Team Details" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">testdata_csv\baseclient_TeamDetails.csv</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">teamCountry,auraInstance,teamRegion,teamState,teamCity,teamOffice,teamCurrency</stringProp>
      </CSVDataSet>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="testdata_templates_path" elementType="Argument">
            <stringProp name="Argument.name">testdata_templates_path</stringProp>
            <stringProp name="Argument.value">testdata_templates/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="thinkTime" elementType="Argument">
            <stringProp name="Argument.name">thinkTime</stringProp>
            <stringProp name="Argument.value">50</stringProp>
            <stringProp name="Argument.desc">Think time in milliseconds.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables (EXAMPLE:  ID values)" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="globalClientFiscalYearId" elementType="Argument">
            <stringProp name="Argument.name">globalClientFiscalYearId</stringProp>
            <stringProp name="Argument.value">b5bd6ead-751b-4e10-bbc1-ac4c013e7ccc</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="componentTeamId" elementType="Argument">
            <stringProp name="Argument.name">componentTeamId</stringProp>
            <stringProp name="Argument.value">undefined</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="activityId" elementType="Argument">
            <stringProp name="Argument.name">activityId</stringProp>
            <stringProp name="Argument.value">864d7c35-00ff-5462-8fc2-81440d14b2af</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="globalClientId" elementType="Argument">
            <stringProp name="Argument.name">globalClientId</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="globalClientFiscalYearStatusId" elementType="Argument">
            <stringProp name="Argument.name">globalClientFiscalYearStatusId</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
      </CookieManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group-A" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">             </stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TC01_Create Base Client Engagement" enabled="false"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TC01_TS01_Click &apos;Create New Engagement&apos;" enabled="true"/>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="1566130678">SourceMdmId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1441452049">
                  <stringProp name="1654646786">862787</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC01_TS01_sub01_/api/globalClients/{{globalClientId}}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/globalClients/${globalClientId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}/engagement/${engagementId}/ega/${egaId}/test/${testId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${bearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Stie</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Frame-Options</stringProp>
                    <stringProp name="Header.value">SAMEORIGIN</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Replaced ${RabbitMQ_Auth}</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC01_TS01_sub02_/api/SourceMdm/{{SourceMdmId}}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/SourceMdm/${SourceMdmId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}/engagement/${engagementId}/ega/${egaId}/test/${testId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${bearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Stie</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Frame-Options</stringProp>
                    <stringProp name="Header.value">SAMEORIGIN</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Replaced ${RabbitMQ_Auth}</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TC01_TS02_Enter Engagement Details" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TC01_TS02_sub01_Add Engagement Leader" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC01_TS02_sub01_/api/globalClient/parties/all  (Engagement Leader)" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="filter" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${userFirstName}+${userLastName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">filter</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/globalClient/parties/all</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Connection</stringProp>
                      <stringProp name="Header.value">keep-alive</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">cross-site</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${envHostname}/engagement/${engagementId}/ega/${egaId}/test/${testId}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${bearerToken}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${envHostname}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">https://${envHostname}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Pragma</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Refer</stringProp>
                      <stringProp name="Header.value">https://${envHostname}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Stie</stringProp>
                      <stringProp name="Header.value">same-site</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Frame-Options</stringProp>
                      <stringProp name="Header.value">SAMEORIGIN</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">Replaced ${RabbitMQ_Auth}</stringProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor (engagementLeaderPPID)" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">engagementLeaderPPID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.items.ppid</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TC01_TS02_sub02_Add Lead Manager" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC02_TS02_sub02_/api/globalClient/parties/all  (Lead Manager)" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="filter" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${userFirstName}+${userLastName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">filter</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/globalClient/parties/all</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Connection</stringProp>
                      <stringProp name="Header.value">keep-alive</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">cross-site</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${envHostname}/engagement/${engagementId}/ega/${egaId}/test/${testId}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${bearerToken}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${envHostname}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">https://${envHostname}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Pragma</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Refer</stringProp>
                      <stringProp name="Header.value">https://${envHostname}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Stie</stringProp>
                      <stringProp name="Header.value">same-site</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Frame-Options</stringProp>
                      <stringProp name="Header.value">SAMEORIGIN</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">Replaced ${RabbitMQ_Auth}</stringProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor (Lead Manager)" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">leadManagerPPID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.items.ppid</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TC01_TS02_sub03_Click on search button in client lookup screen" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC01_TS02_sub03_/api/SourceMdm/search" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;:&#xd;
  {&quot;name&quot;:&quot;${clientName}&quot;,&#xd;
  &quot;stateProvince&quot;:null}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/SourceMdm/search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Connection</stringProp>
                      <stringProp name="Header.value">keep-alive</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">cross-site</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${envHostname}/engagement/${engagementId}/ega/${egaId}/test/${testId}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${bearerToken}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${envHostname}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">https://${envHostname}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Pragma</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Refer</stringProp>
                      <stringProp name="Header.value">https://${envHostname}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Stie</stringProp>
                      <stringProp name="Header.value">same-site</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Frame-Options</stringProp>
                      <stringProp name="Header.value">SAMEORIGIN</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">Replaced ${RabbitMQ_Auth}</stringProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TC01_TS02_sub04_Click on Select button" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC01_TS02_sub04_/api/globalclients/contents/regions/hostedregion" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/globalclients/contents/regions/hostedregion</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Connection</stringProp>
                      <stringProp name="Header.value">keep-alive</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">cross-site</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${envHostname}/engagement/${engagementId}/ega/${egaId}/test/${testId}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${bearerToken}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${envHostname}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">https://${envHostname}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Pragma</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Refer</stringProp>
                      <stringProp name="Header.value">https://${envHostname}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Stie</stringProp>
                      <stringProp name="Header.value">same-site</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Frame-Options</stringProp>
                      <stringProp name="Header.value">SAMEORIGIN</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">Replaced ${RabbitMQ_Auth}</stringProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TC01_TS03_Click &apos;Create Engagement&apos; Button" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC01_TS03_sub01_/api/globalClientFiscalYears/insertGlobalClientFiscalYear" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;item&quot;: {&#xd;
    &quot;address1&quot;: null,&#xd;
    &quot;address2&quot;: null,&#xd;
&quot;city&quot;: null,&#xd;
&quot;createdByUserPPID&quot;: 1009137353,&#xd;
&quot;engagementLeaderPPID&quot;: &quot;${engagementLeaderPPID}&quot;,&#xd;
&quot;globalClientFiscalYearStatusId&quot;: &quot;${globalClientFiscalYearStatusId}&quot;,&#xd;
&quot;globalClientId&quot;: &quot;${globalClientId}&quot;,&#xd;
&quot;isApplicationSystemNotApplicable&quot;: false,&#xd;
&quot;isBusinessUnitNotApplicable&quot;: false,&#xd;
&quot;isCompanyCodeNotApplicable&quot;: false,&#xd;
&quot;isCustomGroupNotApplicable&quot;: false,&#xd;
&quot;isLegalEntityNotApplicable&quot;: false,&#xd;
&quot;isSharedServiceLocationNotApplicable&quot;: false,&#xd;
&quot;isStandAloneTeam&quot;: true,&#xd;
&quot;keyContacts&quot;: [&#xd;
{&quot;roleTypeId&quot;: 1400,&#xd;
&quot;userPPID&quot;: &quot;&quot;,&#xd;
{&quot;roleTypeId&quot;: 1500,&#xd;
&quot;userPPID&quot;: 1003812302},&#xd;
]&#xd;
&quot;leadManagerPPID&quot;: &quot;${leadManagerPPID}&quot;,&#xd;
&quot;name&quot;: &quot;pabtes0003&quot;,&#xd;
&quot;periodEndDateTime&quot;: &quot;15/Jul/2021&quot;,&#xd;
&quot;postalCode&quot;: null,&#xd;
&quot;rollForwardFiscalYear&quot;: null,&#xd;
&quot;rollForwardType&quot;: null,&#xd;
&quot;stateProvince&quot;: null,&#xd;
&quot;taskStatusId&quot;: null,&#xd;
&quot;territoryId&quot;: null&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/globalClientFiscalYears/insertGlobalClientFiscalYear</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}/engagement/${engagementId}/ega/${egaId}/test/${testId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${bearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Stie</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Frame-Options</stringProp>
                    <stringProp name="Header.value">SAMEORIGIN</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Replaced ${RabbitMQ_Auth}</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TC01_TS04_Redirect to &apos;Engagement Setup&apos; Page" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC01_TS04_sub01_api/globalClientFiscalYears/{{globalClientFiscalYearsId}}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/globalClientFiscalYears/${globalClientFiscalYearsId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}/engagement/${engagementId}/ega/${egaId}/test/${testId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${bearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Stie</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Frame-Options</stringProp>
                    <stringProp name="Header.value">SAMEORIGIN</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Replaced ${RabbitMQ_Auth}</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC01_TS04_sub02_api/roles/groupTeamPermissions" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="globalClientFiscalYearId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${globalClientFiscalYearId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">globalClientFiscalYearId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/roles/groupTeamPermissions</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}/engagement/${engagementId}/ega/${egaId}/test/${testId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${bearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Stie</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Frame-Options</stringProp>
                    <stringProp name="Header.value">SAMEORIGIN</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Replaced ${RabbitMQ_Auth}</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC01_TS04_sub03_/api/globalClientFiscalYears/getRecentHistory" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/globalClientFiscalYears/getRecentHistory</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}/engagement/${engagementId}/ega/${egaId}/test/${testId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${bearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Stie</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Frame-Options</stringProp>
                    <stringProp name="Header.value">SAMEORIGIN</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Replaced ${RabbitMQ_Auth}</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC01_TS04_sub04_/api/globalClientFiscalYears/{{globalClientFiscalYearId}}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/globalClientFiscalYears/${globalClientFiscalYearId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}/engagement/${engagementId}/ega/${egaId}/test/${testId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${bearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Stie</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Frame-Options</stringProp>
                    <stringProp name="Header.value">SAMEORIGIN</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Replaced ${RabbitMQ_Auth}</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC01_TS04_sub05_/api/globalClientFiscalYears/{{globalClientFiscalYearId}}/componentTeams/" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/globalClientFiscalYears/${globalClientFiscalYearId}/componentTeams/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}/engagement/${engagementId}/ega/${egaId}/test/${testId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${bearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Stie</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Frame-Options</stringProp>
                    <stringProp name="Header.value">SAMEORIGIN</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Replaced ${RabbitMQ_Auth}</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC01_TS04_sub06_/api/emw/useanc" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="globalClientFiscalYearId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${globalClientFiscalYearId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">globalClientFiscalYearId</stringProp>
                  </elementProp>
                  <elementProp name="componentTeamId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${componentTeamId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">componentTeamId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/emw/useanc</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}/engagement/${engagementId}/ega/${egaId}/test/${testId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${bearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Stie</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Frame-Options</stringProp>
                    <stringProp name="Header.value">SAMEORIGIN</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Replaced ${RabbitMQ_Auth}</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC01_TS04_sub07_/api/globalclients/contents/systemparameters/all/DisabledEMWAPI" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/globalclients/contents/systemparameters/all/DisabledEMWAPI</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}/engagement/${engagementId}/ega/${egaId}/test/${testId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${bearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Stie</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Frame-Options</stringProp>
                    <stringProp name="Header.value">SAMEORIGIN</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Replaced ${RabbitMQ_Auth}</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC01_TS04_sub08_/api/globalclientfiscalyears/{{globalClientFiscalYearId}}/firmSystems/auraEngagements" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="componentTeamId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${componentTeamId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">componentTeamId</stringProp>
                  </elementProp>
                  <elementProp name="activityId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${activityId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">activityId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/globalclientfiscalyears/${globalClientFiscalYearId}/firmSystems/auraEngagements</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}/engagement/${engagementId}/ega/${egaId}/test/${testId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${bearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Stie</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Frame-Options</stringProp>
                    <stringProp name="Header.value">SAMEORIGIN</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Replaced ${RabbitMQ_Auth}</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC01_TS04_sub09_/api/roles/groupTeamPermissions" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="globalClientFiscalYearId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${globalClientFiscalYearId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">globalClientFiscalYearId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/roles/groupTeamPermissions</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}/engagement/${engagementId}/ega/${egaId}/test/${testId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${bearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Stie</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Frame-Options</stringProp>
                    <stringProp name="Header.value">SAMEORIGIN</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Replaced ${RabbitMQ_Auth}</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC01_TS04_sub10_api/globalclientfiscalyears/performInventory" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;item&quot;:&#xd;
{&#xd;
  &quot;performInventory&quot;:&quot;${performIventory}&quot;,&#xd;
  &quot;globalClientFiscalYearId&quot;:&quot;${globalClientFiscalYearId}&quot;,&#xd;
  &quot;componentTeamId&quot;:&quot;${componentTeamId}&quot;},&#xd;
  &quot;activityId&quot;:&quot;${activityId}&quot;&#xd;
  }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/globalclientfiscalyears/performInventory</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}/engagement/${engagementId}/ega/${egaId}/test/${testId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${bearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Stie</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Frame-Options</stringProp>
                    <stringProp name="Header.value">SAMEORIGIN</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Replaced ${RabbitMQ_Auth}</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC01_TS04_sub11_api/emw/useanc" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="globalClientFiscalYearId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${globalClientFiscalYearId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">globalClientFiscalYearId</stringProp>
                  </elementProp>
                  <elementProp name="componentTeamId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${componentTeamId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">componentTeamId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/emw/useanc</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}/engagement/${engagementId}/ega/${egaId}/test/${testId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${bearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Stie</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Frame-Options</stringProp>
                    <stringProp name="Header.value">SAMEORIGIN</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Replaced ${RabbitMQ_Auth}</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC01_TS04_sub12_api/globalClientFiscalYears/{{globalClientFiscalYearId}}/client" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/globalClientFiscalYears/${globalClientFiscalYearId}/client</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}/engagement/${engagementId}/ega/${egaId}/test/${testId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${bearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Stie</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Frame-Options</stringProp>
                    <stringProp name="Header.value">SAMEORIGIN</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Replaced ${RabbitMQ_Auth}</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC01_TS04_sub13_api/globalClientFiscalYears/insertRecentHistory" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;:{&#xd;
  &quot;GlobalClientFiscalYearId&quot;:&quot;${globalCLientFiscalYearId}&quot;},&#xd;
  &quot;activityId&quot;:&quot;${activiyId}&quot;&#xd;
  }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/globalClientFiscalYears/insertRecentHistory</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}/engagement/${engagementId}/ega/${egaId}/test/${testId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${bearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Stie</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Frame-Options</stringProp>
                    <stringProp name="Header.value">SAMEORIGIN</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Replaced ${RabbitMQ_Auth}</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC01_TS04_sub14_/api/globalClients/{{globalClientId}}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/globalClients/${globalClientId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}/engagement/${engagementId}/ega/${egaId}/test/${testId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${bearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Stie</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Frame-Options</stringProp>
                    <stringProp name="Header.value">SAMEORIGIN</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Replaced ${RabbitMQ_Auth}</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC01_TS04_sub15_/api/globalClientFiscalYears/{{globalClientFiscalYearId}}/activities/teamSetupStatuses" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/globalClientFiscalYears/${globalClientFiscalYearId}/activities/teamSetupStatuses</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}/engagement/${engagementId}/ega/${egaId}/test/${testId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${bearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Stie</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Frame-Options</stringProp>
                    <stringProp name="Header.value">SAMEORIGIN</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Replaced ${RabbitMQ_Auth}</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC01_TS04_sub16_api/globalClientFiscalYears/{{globalClientFiscalYearId}}/customGroups/mapped" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="customGroupId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${customGroupId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">customGroupId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/globalClientFiscalYears/${globalClientFiscalYearId}/customGroups/mapped</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}/engagement/${engagementId}/ega/${egaId}/test/${testId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${bearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Stie</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Frame-Options</stringProp>
                    <stringProp name="Header.value">SAMEORIGIN</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Replaced ${RabbitMQ_Auth}</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC01_TS04_sub17_api/globalClientFiscalYears/getTeamSelectorDetails" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="globalClientFiscalYearId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${globalClientFiscalYearId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">globalClientFiscalYearId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/globalClientFiscalYears/getTeamSelectorDetails</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}/engagement/${engagementId}/ega/${egaId}/test/${testId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${bearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Stie</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Frame-Options</stringProp>
                    <stringProp name="Header.value">SAMEORIGIN</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Replaced ${RabbitMQ_Auth}</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC01_TS04_sub18_api/globalClientFiscalYears/{{globalClientFiscalYearId}}/activities/teamSetupStatuses" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/globalClientFiscalYears/${globalClientFiscalYearId}/activities/teamSetupStatuses</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}/engagement/${engagementId}/ega/${egaId}/test/${testId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${bearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Stie</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Frame-Options</stringProp>
                    <stringProp name="Header.value">SAMEORIGIN</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Replaced ${RabbitMQ_Auth}</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC01_TS04_sub19_api/SourceMdm/{{sourceMdmId}}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/SourceMdm/${sourceMdmId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}/engagement/${engagementId}/ega/${egaId}/test/${testId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${bearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Stie</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Frame-Options</stringProp>
                    <stringProp name="Header.value">SAMEORIGIN</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Replaced ${RabbitMQ_Auth}</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC01_TS04_sub20_api/globalclientfiscalyears/{{globalClientFiscalYear}}/componentTeams/undefined" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/globalclientfiscalyears/${globalClientFiscalYear}/componentTeams/undefined</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}/engagement/${engagementId}/ega/${egaId}/test/${testId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${bearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Refer</stringProp>
                    <stringProp name="Header.value">https://${envHostname}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Stie</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Frame-Options</stringProp>
                    <stringProp name="Header.value">SAMEORIGIN</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Replaced ${RabbitMQ_Auth}</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TC02_Create Engagement Team (Team Details)" enabled="false"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TC02_TS01_Select Group Team" enabled="true"/>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="734546697">globalClientId</stringProp>
                <stringProp name="399902422">globalClientFiscalYearStatusId</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="-815607531">periodEndDateTime</stringProp>
                <stringProp name="1732926787">engagementLeaderPPID</stringProp>
                <stringProp name="-874898612">leadManagerPPID</stringProp>
                <stringProp name="879347211">otherContactPPID</stringProp>
                <stringProp name="1461337564">otherContact1PPID</stringProp>
                <stringProp name="1462261085">otherContact2PPID</stringProp>
                <stringProp name="3053931">city</stringProp>
                <stringProp name="-737736740">stateProvinceId</stringProp>
                <stringProp name="88617697">stateProvince</stringProp>
                <stringProp name="-1609805099">territoryId</stringProp>
                <stringProp name="-1089455860">currencyId</stringProp>
                <stringProp name="-1416653844">isStandAloneTeam</stringProp>
                <stringProp name="-936611406">auraRegionId</stringProp>
                <stringProp name="-1011566726">auraOfficeId</stringProp>
                <stringProp name="479291298">auraSystemInstanceId</stringProp>
                <stringProp name="2048619658">activityId</stringProp>
                <stringProp name="2115469828">globalClientFiscalYearId</stringProp>
                <stringProp name="1379158103">activitiesActivityId</stringProp>
                <stringProp name="1929103844">activityTypeId</stringProp>
                <stringProp name="732505911">activityReferenceId</stringProp>
                <stringProp name="-1668760952">teamName</stringProp>
                <stringProp name="-604257113">moduleId</stringProp>
                <stringProp name="438271196">activityStatusId</stringProp>
                <stringProp name="1349547969">sequence</stringProp>
                <stringProp name="2001063874">dueDate</stringProp>
                <stringProp name="-113035288">isVisible</stringProp>
                <stringProp name="-1068784020">module</stringProp>
                <stringProp name="883318257">primaryAssignee</stringProp>
                <stringProp name="106437350">party</stringProp>
                <stringProp name="-1829727278">keyContacts</stringProp>
                <stringProp name="-312609911">assignedDateTime</stringProp>
                <stringProp name="1637639774">totalRecords</stringProp>
                <stringProp name="86246492">rowTimestamp</stringProp>
                <stringProp name="-218318990">machineName</stringProp>
                <stringProp name="-266856204">userGuid</stringProp>
                <stringProp name="970684303">isDeleted</stringProp>
                <stringProp name="1094085656">activitiesName</stringProp>
                <stringProp name="1320683304">activityCategoryId</stringProp>
                <stringProp name="-798572619">componentTeamId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-23940009">
                  <stringProp name="388563296">&quot;e48eef5f-b158-49b4-b89c-ac1b012a97d0&quot;</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-147830810">&quot;PerfTest_20201008_1311&quot;</stringProp>
                  <stringProp name="-507125803">&quot;2020-10-08T00:00:00&quot;</stringProp>
                  <stringProp name="-1864085113">1006666118</stringProp>
                  <stringProp name="-231232502">1008178984</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="1131008286">${teamCity}</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="1169172192">${teamState}</stringProp>
                  <stringProp name="49683">234</stringProp>
                  <stringProp name="1366366520">${teamCurrency}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="572881333">${teamRegion}</stringProp>
                  <stringProp name="-2061935891">${teamOffice}</stringProp>
                  <stringProp name="1662677230">${auraInstance}</stringProp>
                  <stringProp name="1904960751">&quot;20898504-23a6-5d42-938c-e6bdabc2ce71&quot;</stringProp>
                  <stringProp name="-538622682">&quot;e93cdbf6-688e-4456-9b23-ac4c01345b88&quot;</stringProp>
                  <stringProp name="1493079629">&quot;519f880b-3a2c-49e5-938c-6afb06449146&quot;</stringProp>
                  <stringProp name="-214256392">&quot;b6bce706-07d7-44c3-8140-bd32129211fe&quot;</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="1484748513">&quot;PerfTest_20201005_1753&quot;</stringProp>
                  <stringProp name="1604">26</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1691">50</stringProp>
                  <stringProp name="-34432994">&quot;2020-10-05T21:54:50.78&quot;</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="-231232502">1008178984</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="-34433211">&quot;2020-10-05T21:54:50.71&quot;</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="-920478985">&quot;AAAAABJjRvY=&quot;</stringProp>
                  <stringProp name="1080535140">&quot;ATP2ZU2APDWV079&quot;</stringProp>
                  <stringProp name="1153520486">&quot;testUser001&quot;</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="-166167864">&quot;Set up and complete engagement details&quot;</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="3392903">null</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-1986261171">Base Client Performance Test Plan</stringProp>
                <stringProp name="-1402880153">Modules</stringProp>
                <stringProp name="475553256">TC02_Create Engagement Team</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TC02_TS02_Select Country" enabled="true"/>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="734546697">globalClientId</stringProp>
                <stringProp name="399902422">globalClientFiscalYearStatusId</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="-815607531">periodEndDateTime</stringProp>
                <stringProp name="1732926787">engagementLeaderPPID</stringProp>
                <stringProp name="-874898612">leadManagerPPID</stringProp>
                <stringProp name="879347211">otherContactPPID</stringProp>
                <stringProp name="1461337564">otherContact1PPID</stringProp>
                <stringProp name="1462261085">otherContact2PPID</stringProp>
                <stringProp name="3053931">city</stringProp>
                <stringProp name="-737736740">stateProvinceId</stringProp>
                <stringProp name="88617697">stateProvince</stringProp>
                <stringProp name="-1609805099">territoryId</stringProp>
                <stringProp name="-1089455860">currencyId</stringProp>
                <stringProp name="-1416653844">isStandAloneTeam</stringProp>
                <stringProp name="-936611406">auraRegionId</stringProp>
                <stringProp name="-1011566726">auraOfficeId</stringProp>
                <stringProp name="479291298">auraSystemInstanceId</stringProp>
                <stringProp name="2048619658">activityId</stringProp>
                <stringProp name="2115469828">globalClientFiscalYearId</stringProp>
                <stringProp name="1379158103">activitiesActivityId</stringProp>
                <stringProp name="1929103844">activityTypeId</stringProp>
                <stringProp name="732505911">activityReferenceId</stringProp>
                <stringProp name="-1668760952">teamName</stringProp>
                <stringProp name="-604257113">moduleId</stringProp>
                <stringProp name="438271196">activityStatusId</stringProp>
                <stringProp name="1349547969">sequence</stringProp>
                <stringProp name="2001063874">dueDate</stringProp>
                <stringProp name="-113035288">isVisible</stringProp>
                <stringProp name="-1068784020">module</stringProp>
                <stringProp name="883318257">primaryAssignee</stringProp>
                <stringProp name="106437350">party</stringProp>
                <stringProp name="-1829727278">keyContacts</stringProp>
                <stringProp name="-312609911">assignedDateTime</stringProp>
                <stringProp name="1637639774">totalRecords</stringProp>
                <stringProp name="86246492">rowTimestamp</stringProp>
                <stringProp name="-218318990">machineName</stringProp>
                <stringProp name="-266856204">userGuid</stringProp>
                <stringProp name="970684303">isDeleted</stringProp>
                <stringProp name="1094085656">activitiesName</stringProp>
                <stringProp name="1320683304">activityCategoryId</stringProp>
                <stringProp name="-798572619">componentTeamId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="406072817">
                  <stringProp name="388563296">&quot;e48eef5f-b158-49b4-b89c-ac1b012a97d0&quot;</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-147830810">&quot;PerfTest_20201008_1311&quot;</stringProp>
                  <stringProp name="-507125803">&quot;2020-10-08T00:00:00&quot;</stringProp>
                  <stringProp name="-1864085113">1006666118</stringProp>
                  <stringProp name="-231232502">1008178984</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="1131008286">${teamCity}</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="1169172192">${teamState}</stringProp>
                  <stringProp name="49684">235</stringProp>
                  <stringProp name="1366366520">${teamCurrency}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="572881333">${teamRegion}</stringProp>
                  <stringProp name="-2061935891">${teamOffice}</stringProp>
                  <stringProp name="1662677230">${auraInstance}</stringProp>
                  <stringProp name="1904960751">&quot;20898504-23a6-5d42-938c-e6bdabc2ce71&quot;</stringProp>
                  <stringProp name="-538622682">&quot;e93cdbf6-688e-4456-9b23-ac4c01345b88&quot;</stringProp>
                  <stringProp name="1493079629">&quot;519f880b-3a2c-49e5-938c-6afb06449146&quot;</stringProp>
                  <stringProp name="-214256392">&quot;b6bce706-07d7-44c3-8140-bd32129211fe&quot;</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="1484748513">&quot;PerfTest_20201005_1753&quot;</stringProp>
                  <stringProp name="1604">26</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1691">50</stringProp>
                  <stringProp name="-34432994">&quot;2020-10-05T21:54:50.78&quot;</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="-231232502">1008178984</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="-34433211">&quot;2020-10-05T21:54:50.71&quot;</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="-920478985">&quot;AAAAABJjRvY=&quot;</stringProp>
                  <stringProp name="1080535140">&quot;ATP2ZU2APDWV079&quot;</stringProp>
                  <stringProp name="1153520486">&quot;testUser001&quot;</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="-166167864">&quot;Set up and complete engagement details&quot;</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="3392903">null</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-1986261171">Base Client Performance Test Plan</stringProp>
                <stringProp name="-1402880153">Modules</stringProp>
                <stringProp name="475553256">TC02_Create Engagement Team</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TC02_TS03_Select Aura Instance" enabled="true"/>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="734546697">globalClientId</stringProp>
                <stringProp name="399902422">globalClientFiscalYearStatusId</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="-815607531">periodEndDateTime</stringProp>
                <stringProp name="1732926787">engagementLeaderPPID</stringProp>
                <stringProp name="-874898612">leadManagerPPID</stringProp>
                <stringProp name="879347211">otherContactPPID</stringProp>
                <stringProp name="1461337564">otherContact1PPID</stringProp>
                <stringProp name="1462261085">otherContact2PPID</stringProp>
                <stringProp name="3053931">city</stringProp>
                <stringProp name="-737736740">stateProvinceId</stringProp>
                <stringProp name="88617697">stateProvince</stringProp>
                <stringProp name="-1609805099">territoryId</stringProp>
                <stringProp name="-1089455860">currencyId</stringProp>
                <stringProp name="-1416653844">isStandAloneTeam</stringProp>
                <stringProp name="-936611406">auraRegionId</stringProp>
                <stringProp name="-1011566726">auraOfficeId</stringProp>
                <stringProp name="479291298">auraSystemInstanceId</stringProp>
                <stringProp name="2048619658">activityId</stringProp>
                <stringProp name="2115469828">globalClientFiscalYearId</stringProp>
                <stringProp name="1379158103">activitiesActivityId</stringProp>
                <stringProp name="1929103844">activityTypeId</stringProp>
                <stringProp name="732505911">activityReferenceId</stringProp>
                <stringProp name="-1668760952">teamName</stringProp>
                <stringProp name="-604257113">moduleId</stringProp>
                <stringProp name="438271196">activityStatusId</stringProp>
                <stringProp name="1349547969">sequence</stringProp>
                <stringProp name="2001063874">dueDate</stringProp>
                <stringProp name="-113035288">isVisible</stringProp>
                <stringProp name="-1068784020">module</stringProp>
                <stringProp name="883318257">primaryAssignee</stringProp>
                <stringProp name="106437350">party</stringProp>
                <stringProp name="-1829727278">keyContacts</stringProp>
                <stringProp name="-312609911">assignedDateTime</stringProp>
                <stringProp name="1637639774">totalRecords</stringProp>
                <stringProp name="86246492">rowTimestamp</stringProp>
                <stringProp name="-218318990">machineName</stringProp>
                <stringProp name="-266856204">userGuid</stringProp>
                <stringProp name="970684303">isDeleted</stringProp>
                <stringProp name="1094085656">activitiesName</stringProp>
                <stringProp name="1320683304">activityCategoryId</stringProp>
                <stringProp name="-798572619">componentTeamId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="406072817">
                  <stringProp name="388563296">&quot;e48eef5f-b158-49b4-b89c-ac1b012a97d0&quot;</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-147830810">&quot;PerfTest_20201008_1311&quot;</stringProp>
                  <stringProp name="-507125803">&quot;2020-10-08T00:00:00&quot;</stringProp>
                  <stringProp name="-1864085113">1006666118</stringProp>
                  <stringProp name="-231232502">1008178984</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="1131008286">${teamCity}</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="1169172192">${teamState}</stringProp>
                  <stringProp name="49684">235</stringProp>
                  <stringProp name="1366366520">${teamCurrency}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="572881333">${teamRegion}</stringProp>
                  <stringProp name="-2061935891">${teamOffice}</stringProp>
                  <stringProp name="1662677230">${auraInstance}</stringProp>
                  <stringProp name="1904960751">&quot;20898504-23a6-5d42-938c-e6bdabc2ce71&quot;</stringProp>
                  <stringProp name="-538622682">&quot;e93cdbf6-688e-4456-9b23-ac4c01345b88&quot;</stringProp>
                  <stringProp name="1493079629">&quot;519f880b-3a2c-49e5-938c-6afb06449146&quot;</stringProp>
                  <stringProp name="-214256392">&quot;b6bce706-07d7-44c3-8140-bd32129211fe&quot;</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="1484748513">&quot;PerfTest_20201005_1753&quot;</stringProp>
                  <stringProp name="1604">26</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1691">50</stringProp>
                  <stringProp name="-34432994">&quot;2020-10-05T21:54:50.78&quot;</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="-231232502">1008178984</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="-34433211">&quot;2020-10-05T21:54:50.71&quot;</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="-920478985">&quot;AAAAABJjRvY=&quot;</stringProp>
                  <stringProp name="1080535140">&quot;ATP2ZU2APDWV079&quot;</stringProp>
                  <stringProp name="1153520486">&quot;testUser001&quot;</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="-166167864">&quot;Set up and complete engagement details&quot;</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="3392903">null</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-1986261171">Base Client Performance Test Plan</stringProp>
                <stringProp name="-1402880153">Modules</stringProp>
                <stringProp name="475553256">TC02_Create Engagement Team</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TC02_TS04_Select State" enabled="true"/>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="734546697">globalClientId</stringProp>
                <stringProp name="399902422">globalClientFiscalYearStatusId</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="-815607531">periodEndDateTime</stringProp>
                <stringProp name="1732926787">engagementLeaderPPID</stringProp>
                <stringProp name="-874898612">leadManagerPPID</stringProp>
                <stringProp name="879347211">otherContactPPID</stringProp>
                <stringProp name="1461337564">otherContact1PPID</stringProp>
                <stringProp name="1462261085">otherContact2PPID</stringProp>
                <stringProp name="3053931">city</stringProp>
                <stringProp name="-737736740">stateProvinceId</stringProp>
                <stringProp name="88617697">stateProvince</stringProp>
                <stringProp name="-1609805099">territoryId</stringProp>
                <stringProp name="-1089455860">currencyId</stringProp>
                <stringProp name="-1416653844">isStandAloneTeam</stringProp>
                <stringProp name="-936611406">auraRegionId</stringProp>
                <stringProp name="-1011566726">auraOfficeId</stringProp>
                <stringProp name="479291298">auraSystemInstanceId</stringProp>
                <stringProp name="2048619658">activityId</stringProp>
                <stringProp name="2115469828">globalClientFiscalYearId</stringProp>
                <stringProp name="1379158103">activitiesActivityId</stringProp>
                <stringProp name="1929103844">activityTypeId</stringProp>
                <stringProp name="732505911">activityReferenceId</stringProp>
                <stringProp name="-1668760952">teamName</stringProp>
                <stringProp name="-604257113">moduleId</stringProp>
                <stringProp name="438271196">activityStatusId</stringProp>
                <stringProp name="1349547969">sequence</stringProp>
                <stringProp name="2001063874">dueDate</stringProp>
                <stringProp name="-113035288">isVisible</stringProp>
                <stringProp name="-1068784020">module</stringProp>
                <stringProp name="883318257">primaryAssignee</stringProp>
                <stringProp name="106437350">party</stringProp>
                <stringProp name="-1829727278">keyContacts</stringProp>
                <stringProp name="-312609911">assignedDateTime</stringProp>
                <stringProp name="1637639774">totalRecords</stringProp>
                <stringProp name="86246492">rowTimestamp</stringProp>
                <stringProp name="-218318990">machineName</stringProp>
                <stringProp name="-266856204">userGuid</stringProp>
                <stringProp name="970684303">isDeleted</stringProp>
                <stringProp name="1094085656">activitiesName</stringProp>
                <stringProp name="1320683304">activityCategoryId</stringProp>
                <stringProp name="-798572619">componentTeamId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-47951895">
                  <stringProp name="388563296">&quot;e48eef5f-b158-49b4-b89c-ac1b012a97d0&quot;</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-147830810">&quot;PerfTest_20201008_1311&quot;</stringProp>
                  <stringProp name="-507125803">&quot;2020-10-08T00:00:00&quot;</stringProp>
                  <stringProp name="-1864085113">1006666118</stringProp>
                  <stringProp name="-231232502">1008178984</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="1131008286">${teamCity}</stringProp>
                  <stringProp name="1568">11</stringProp>
                  <stringProp name="1169172192">${teamState}</stringProp>
                  <stringProp name="49684">235</stringProp>
                  <stringProp name="1366366520">${teamCurrency}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="572881333">${teamRegion}</stringProp>
                  <stringProp name="-2061935891">${teamOffice}</stringProp>
                  <stringProp name="1662677230">${auraInstance}</stringProp>
                  <stringProp name="1904960751">&quot;20898504-23a6-5d42-938c-e6bdabc2ce71&quot;</stringProp>
                  <stringProp name="-538622682">&quot;e93cdbf6-688e-4456-9b23-ac4c01345b88&quot;</stringProp>
                  <stringProp name="1493079629">&quot;519f880b-3a2c-49e5-938c-6afb06449146&quot;</stringProp>
                  <stringProp name="-214256392">&quot;b6bce706-07d7-44c3-8140-bd32129211fe&quot;</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="1484748513">&quot;PerfTest_20201005_1753&quot;</stringProp>
                  <stringProp name="1604">26</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1691">50</stringProp>
                  <stringProp name="-34432994">&quot;2020-10-05T21:54:50.78&quot;</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="-231232502">1008178984</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="-34433211">&quot;2020-10-05T21:54:50.71&quot;</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="-920478985">&quot;AAAAABJjRvY=&quot;</stringProp>
                  <stringProp name="1080535140">&quot;ATP2ZU2APDWV079&quot;</stringProp>
                  <stringProp name="1153520486">&quot;testUser001&quot;</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="-166167864">&quot;Set up and complete engagement details&quot;</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="3392903">null</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-1986261171">Base Client Performance Test Plan</stringProp>
                <stringProp name="-1402880153">Modules</stringProp>
                <stringProp name="475553256">TC02_Create Engagement Team</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TC02_TS05_Select Office" enabled="true"/>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="734546697">globalClientId</stringProp>
                <stringProp name="399902422">globalClientFiscalYearStatusId</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="-815607531">periodEndDateTime</stringProp>
                <stringProp name="1732926787">engagementLeaderPPID</stringProp>
                <stringProp name="-874898612">leadManagerPPID</stringProp>
                <stringProp name="879347211">otherContactPPID</stringProp>
                <stringProp name="1461337564">otherContact1PPID</stringProp>
                <stringProp name="1462261085">otherContact2PPID</stringProp>
                <stringProp name="3053931">city</stringProp>
                <stringProp name="-737736740">stateProvinceId</stringProp>
                <stringProp name="88617697">stateProvince</stringProp>
                <stringProp name="-1609805099">territoryId</stringProp>
                <stringProp name="-1089455860">currencyId</stringProp>
                <stringProp name="-1416653844">isStandAloneTeam</stringProp>
                <stringProp name="-936611406">auraRegionId</stringProp>
                <stringProp name="-1011566726">auraOfficeId</stringProp>
                <stringProp name="479291298">auraSystemInstanceId</stringProp>
                <stringProp name="2048619658">activityId</stringProp>
                <stringProp name="2115469828">globalClientFiscalYearId</stringProp>
                <stringProp name="1379158103">activitiesActivityId</stringProp>
                <stringProp name="1929103844">activityTypeId</stringProp>
                <stringProp name="732505911">activityReferenceId</stringProp>
                <stringProp name="-1668760952">teamName</stringProp>
                <stringProp name="-604257113">moduleId</stringProp>
                <stringProp name="438271196">activityStatusId</stringProp>
                <stringProp name="1349547969">sequence</stringProp>
                <stringProp name="2001063874">dueDate</stringProp>
                <stringProp name="-113035288">isVisible</stringProp>
                <stringProp name="-1068784020">module</stringProp>
                <stringProp name="883318257">primaryAssignee</stringProp>
                <stringProp name="106437350">party</stringProp>
                <stringProp name="-1829727278">keyContacts</stringProp>
                <stringProp name="-312609911">assignedDateTime</stringProp>
                <stringProp name="1637639774">totalRecords</stringProp>
                <stringProp name="86246492">rowTimestamp</stringProp>
                <stringProp name="-218318990">machineName</stringProp>
                <stringProp name="-266856204">userGuid</stringProp>
                <stringProp name="970684303">isDeleted</stringProp>
                <stringProp name="1094085656">activitiesName</stringProp>
                <stringProp name="1320683304">activityCategoryId</stringProp>
                <stringProp name="-798572619">componentTeamId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-47951895">
                  <stringProp name="388563296">&quot;e48eef5f-b158-49b4-b89c-ac1b012a97d0&quot;</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-147830810">&quot;PerfTest_20201008_1311&quot;</stringProp>
                  <stringProp name="-507125803">&quot;2020-10-08T00:00:00&quot;</stringProp>
                  <stringProp name="-1864085113">1006666118</stringProp>
                  <stringProp name="-231232502">1008178984</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="1131008286">${teamCity}</stringProp>
                  <stringProp name="1568">11</stringProp>
                  <stringProp name="1169172192">${teamState}</stringProp>
                  <stringProp name="49684">235</stringProp>
                  <stringProp name="1366366520">${teamCurrency}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="572881333">${teamRegion}</stringProp>
                  <stringProp name="-2061935891">${teamOffice}</stringProp>
                  <stringProp name="1662677230">${auraInstance}</stringProp>
                  <stringProp name="1904960751">&quot;20898504-23a6-5d42-938c-e6bdabc2ce71&quot;</stringProp>
                  <stringProp name="-538622682">&quot;e93cdbf6-688e-4456-9b23-ac4c01345b88&quot;</stringProp>
                  <stringProp name="1493079629">&quot;519f880b-3a2c-49e5-938c-6afb06449146&quot;</stringProp>
                  <stringProp name="-214256392">&quot;b6bce706-07d7-44c3-8140-bd32129211fe&quot;</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="1484748513">&quot;PerfTest_20201005_1753&quot;</stringProp>
                  <stringProp name="1604">26</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1691">50</stringProp>
                  <stringProp name="-34432994">&quot;2020-10-05T21:54:50.78&quot;</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="-231232502">1008178984</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="-34433211">&quot;2020-10-05T21:54:50.71&quot;</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="-920478985">&quot;AAAAABJjRvY=&quot;</stringProp>
                  <stringProp name="1080535140">&quot;ATP2ZU2APDWV079&quot;</stringProp>
                  <stringProp name="1153520486">&quot;testUser001&quot;</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="-166167864">&quot;Set up and complete engagement details&quot;</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="3392903">null</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-1986261171">Base Client Performance Test Plan</stringProp>
                <stringProp name="-1402880153">Modules</stringProp>
                <stringProp name="475553256">TC02_Create Engagement Team</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TC02_TS06_Select Currency" enabled="true"/>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="734546697">globalClientId</stringProp>
                <stringProp name="399902422">globalClientFiscalYearStatusId</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="-815607531">periodEndDateTime</stringProp>
                <stringProp name="1732926787">engagementLeaderPPID</stringProp>
                <stringProp name="-874898612">leadManagerPPID</stringProp>
                <stringProp name="879347211">otherContactPPID</stringProp>
                <stringProp name="1461337564">otherContact1PPID</stringProp>
                <stringProp name="1462261085">otherContact2PPID</stringProp>
                <stringProp name="3053931">city</stringProp>
                <stringProp name="-737736740">stateProvinceId</stringProp>
                <stringProp name="88617697">stateProvince</stringProp>
                <stringProp name="-1609805099">territoryId</stringProp>
                <stringProp name="-1089455860">currencyId</stringProp>
                <stringProp name="-1416653844">isStandAloneTeam</stringProp>
                <stringProp name="-936611406">auraRegionId</stringProp>
                <stringProp name="-1011566726">auraOfficeId</stringProp>
                <stringProp name="479291298">auraSystemInstanceId</stringProp>
                <stringProp name="2048619658">activityId</stringProp>
                <stringProp name="2115469828">globalClientFiscalYearId</stringProp>
                <stringProp name="1379158103">activitiesActivityId</stringProp>
                <stringProp name="1929103844">activityTypeId</stringProp>
                <stringProp name="732505911">activityReferenceId</stringProp>
                <stringProp name="-1668760952">teamName</stringProp>
                <stringProp name="-604257113">moduleId</stringProp>
                <stringProp name="438271196">activityStatusId</stringProp>
                <stringProp name="1349547969">sequence</stringProp>
                <stringProp name="2001063874">dueDate</stringProp>
                <stringProp name="-113035288">isVisible</stringProp>
                <stringProp name="-1068784020">module</stringProp>
                <stringProp name="883318257">primaryAssignee</stringProp>
                <stringProp name="106437350">party</stringProp>
                <stringProp name="-1829727278">keyContacts</stringProp>
                <stringProp name="-312609911">assignedDateTime</stringProp>
                <stringProp name="1637639774">totalRecords</stringProp>
                <stringProp name="86246492">rowTimestamp</stringProp>
                <stringProp name="-218318990">machineName</stringProp>
                <stringProp name="-266856204">userGuid</stringProp>
                <stringProp name="970684303">isDeleted</stringProp>
                <stringProp name="1094085656">activitiesName</stringProp>
                <stringProp name="1320683304">activityCategoryId</stringProp>
                <stringProp name="-798572619">componentTeamId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-47951895">
                  <stringProp name="388563296">&quot;e48eef5f-b158-49b4-b89c-ac1b012a97d0&quot;</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-147830810">&quot;PerfTest_20201008_1311&quot;</stringProp>
                  <stringProp name="-507125803">&quot;2020-10-08T00:00:00&quot;</stringProp>
                  <stringProp name="-1864085113">1006666118</stringProp>
                  <stringProp name="-231232502">1008178984</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="1131008286">${teamCity}</stringProp>
                  <stringProp name="1568">11</stringProp>
                  <stringProp name="1169172192">${teamState}</stringProp>
                  <stringProp name="49684">235</stringProp>
                  <stringProp name="1366366520">${teamCurrency}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="572881333">${teamRegion}</stringProp>
                  <stringProp name="-2061935891">${teamOffice}</stringProp>
                  <stringProp name="1662677230">${auraInstance}</stringProp>
                  <stringProp name="1904960751">&quot;20898504-23a6-5d42-938c-e6bdabc2ce71&quot;</stringProp>
                  <stringProp name="-538622682">&quot;e93cdbf6-688e-4456-9b23-ac4c01345b88&quot;</stringProp>
                  <stringProp name="1493079629">&quot;519f880b-3a2c-49e5-938c-6afb06449146&quot;</stringProp>
                  <stringProp name="-214256392">&quot;b6bce706-07d7-44c3-8140-bd32129211fe&quot;</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="1484748513">&quot;PerfTest_20201005_1753&quot;</stringProp>
                  <stringProp name="1604">26</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1691">50</stringProp>
                  <stringProp name="-34432994">&quot;2020-10-05T21:54:50.78&quot;</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="-231232502">1008178984</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="-34433211">&quot;2020-10-05T21:54:50.71&quot;</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="-920478985">&quot;AAAAABJjRvY=&quot;</stringProp>
                  <stringProp name="1080535140">&quot;ATP2ZU2APDWV079&quot;</stringProp>
                  <stringProp name="1153520486">&quot;testUser001&quot;</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="-166167864">&quot;Set up and complete engagement details&quot;</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="3392903">null</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="507340353">Base Client Performance Test Plan</stringProp>
                <stringProp name="-1402880153">Modules</stringProp>
                <stringProp name="475553256">TC02_Create Engagement Team</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TC03_Add Team (Team Member &amp; Access)" enabled="false"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TC03_TS01_select team members &amp; access" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC03_TS01_sub01_/api/globalclientfiscalyears/{{globalClientFiscalYearId}}/firmSystems/auraEngagementsACL" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/globalclientfiscalyears/${globalClientFiscalYearId}/firmSystems/auraEngagementsACL?TeamId=${globalClientFiscalYearId}&amp;activityId=${activityId}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Pragma" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="X-Frame-Options" elementType="Header">
                    <stringProp name="Header.name">X-Frame-Options</stringProp>
                    <stringProp name="Header.value">SAMEORIGIN</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - Get lines of DataSet Team Members" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">String Filename = vars.get(&quot;testdata_csv\baseclient_TeamMembers.csv&quot;)
String fileContents = new File(Filename).getText(&apos;UTF-8&apos;)
def lines = 0  
    fileContents.eachLine { line -&gt;
        lines++
        vars.put(&quot;CSVLine_&quot; + lines, line)
    }
vars.put(&quot;GETfileLength&quot;,lines.toString())   
log.debug(Filename + &quot; has &quot; + lines + &quot; lines.&quot;)</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="TC03_TS02_Add Team Member" enabled="true">
            <stringProp name="ForeachController.inputVal">CSVLine</stringProp>
            <stringProp name="ForeachController.returnVal">LineContent</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
            <stringProp name="ForeachController.startIndex">0</stringProp>
            <stringProp name="ForeachController.endIndex">${GETfileLength}</stringProp>
          </ForeachController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV DataSet Team Members" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">testdata_csv\baseclient_TeamMembers.csv</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">teamMemberFullName,teamMemberEmail,teamMemberGuid,auraRole,auraRoleId</stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - Get Team Member name" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">CSVLineSplit=${__split(${LineContent},CSVLineSplit)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TC03_TS02_click add (team member)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC03_TS02_sub02_api/globalClient/parties/all?filter={{CSVLineSplit_1}}" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="filter" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">filter</stringProp>
                      <stringProp name="Argument.value">${CSVLineSplit_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/globalClient/parties/all</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Pragma" elementType="Header">
                      <stringProp name="Header.name">Pragma</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${bearerToken}</stringProp>
                    </elementProp>
                    <elementProp name="X-Frame-Options" elementType="Header">
                      <stringProp name="Header.name">X-Frame-Options</stringProp>
                      <stringProp name="Header.value">SAMEORIGIN</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor (UserPPID)" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">UserPPID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..ppid</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC03_TS02_sub03_/api/roles/addNewUser" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;item&quot;:{&quot;UserPPID&quot;:${UserPPID},&quot;RoleTypeId&quot;:300,&quot;GlobalClientFiscalYearId&quot;:&quot;${GlobalClientFiscalYearId}&quot;,&quot;ComponentTeamId&quot;:null,&quot;GlobalClientId&quot;:&quot;${GlobalClientId}&quot;},&quot;activityId&quot;:&quot;${activityId}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/roles/addNewUser</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Pragma" elementType="Header">
                      <stringProp name="Header.name">Pragma</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${bearerToken}</stringProp>
                    </elementProp>
                    <elementProp name="X-Frame-Options" elementType="Header">
                      <stringProp name="Header.name">X-Frame-Options</stringProp>
                      <stringProp name="Header.value">SAMEORIGIN</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor (createDateTime)" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">createDateTime</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..createDateTime</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor (lastChangeDateTime)" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">lastChangeDateTime</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..lastChangeDateTime</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TC03_TS02_Click &apos;Mark Step As Complete&apos;" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC03_TS02_sub04_/api/globalclientfiscalyears/{{globalClientFiscalYearId}}/activities/" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;item&quot;:{&quot;activityId&quot;:&quot;${activitiesActivityId}&quot;,&quot;activityTypeId&quot;:&quot;${activityTypeId}&quot;,&quot;activityReferenceId&quot;:${activityReferenceId},&quot;name&quot;:&quot;${name}&quot;,&quot;activityCategoryId&quot;:${activityCategoryId},&quot;componentTeamId&quot;:${componentTeamId},&quot;teamName&quot;:&quot;${teamName}&quot;,&quot;globalClientFiscalYearId&quot;:&quot;${globalClientFiscalYearId}&quot;,&quot;moduleId&quot;:${moduleId},&quot;activityStatusId&quot;:${activityStatusId},&quot;sequence&quot;:${sequence},&quot;dueDate&quot;:&quot;${dueDate}&quot;,&quot;isVisible&quot;:${isVisible},&quot;module&quot;:${module},&quot;primaryAssignee&quot;:${primaryAssignee},&quot;party&quot;:${party},&quot;keyContacts&quot;:${keyContacts},&quot;assignedDateTime&quot;:&quot;${lastChangeDateTime}&quot;,&quot;totalRecords&quot;:${totalRecords},&quot;rowTimestamp&quot;:&quot;${rowTimestamp}&quot;,&quot;createDateTime&quot;:&quot;${createDateTime}&quot;,&quot;lastChangeDateTime&quot;:&quot;${lastChangeDateTime}&quot;,&quot;machineName&quot;:&quot;${machineName}&quot;,&quot;userGuid&quot;:&quot;${userGuid}&quot;,&quot;isDeleted&quot;:${isDeleted}}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/globalclientfiscalyears/${globalClientFiscalYearId}/activities/</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Pragma" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="X-Frame-Options" elementType="Header">
                    <stringProp name="Header.name">X-Frame-Options</stringProp>
                    <stringProp name="Header.value">SAMEORIGIN</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC03_TS02_sub05_/api/globalClientFiscalYears/{{globalClientFiscalYearId}}/activities/teamSetupStatuses" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/globalClientFiscalYears/${globalClientFiscalYearId}/activities/teamSetupStatuses</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Pragma" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="X-Frame-Options" elementType="Header">
                    <stringProp name="Header.name">X-Frame-Options</stringProp>
                    <stringProp name="Header.value">SAMEORIGIN</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Modules" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="TC02_Create Engagement Team" enabled="true">
          <boolProp name="PARENT_SAMPLE">false</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC02_TS01_sub01_/api/globalClientFiscalYears" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;item&quot;:{&quot;globalClientId&quot;:&quot;${globalClientId}&quot;,&quot;globalClientFiscalYearId&quot;:&quot;${globalClientFiscalYearId}&quot;,&quot;globalClientFiscalYearStatusId&quot;:${globalClientFiscalYearStatusId},&quot;name&quot;:&quot;${name}&quot;,&quot;periodEndDateTime&quot;:&quot;${periodEndDateTime}&quot;,&quot;engagementLeaderPPID&quot;:${engagementLeaderPPID},&quot;leadManagerPPID&quot;:${leadManagerPPID},&quot;otherContactPPID&quot;:${otherContactPPID},&quot;otherContact1PPID&quot;:${otherContact1PPID},&quot;otherContact2PPID&quot;:${otherContact2PPID},&quot;city&quot;:${city},&quot;stateProvince&quot;:${stateProvince},&quot;stateProvinceId&quot;:${stateProvinceId},&quot;territoryId&quot;:${territoryId},&quot;currencyId&quot;:${currencyId},&quot;isStandAloneTeam&quot;:${isStandAloneTeam},&quot;auraRegionId&quot;:${auraRegionId},&quot;auraOfficeId&quot;:${auraOfficeId},&quot;auraSystemInstanceId&quot;:&quot;${auraSystemInstanceId}&quot;},&quot;activityId&quot;:&quot;${activityId}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/globalClientFiscalYears</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearerToken}</stringProp>
                </elementProp>
                <elementProp name="X-Frame-Options" elementType="Header">
                  <stringProp name="Header.name">X-Frame-Options</stringProp>
                  <stringProp name="Header.value">SAMEORIGIN</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC02_TS01_sub02_/api/globalClientFiscalYears/{{globalClientFiscalYearId}}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/globalClientFiscalYears/${globalClientFiscalYearId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearerToken}</stringProp>
                </elementProp>
                <elementProp name="X-Frame-Options" elementType="Header">
                  <stringProp name="Header.name">X-Frame-Options</stringProp>
                  <stringProp name="Header.value">SAMEORIGIN</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor (territoryId)" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">territoryId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..territoryId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor (createDateTime)" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">createDateTime</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..createDateTime</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor (lastChangeDateTime)" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">lastChangeDateTime</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..lastChangeDateTime</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC02_TS01_sub03_/api/gdapi/auraInstanceByTerritoryId/{{territoryId}}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/gdapi/auraInstanceByTerritoryId/${territoryId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearerToken}</stringProp>
                </elementProp>
                <elementProp name="X-Frame-Options" elementType="Header">
                  <stringProp name="Header.name">X-Frame-Options</stringProp>
                  <stringProp name="Header.value">SAMEORIGIN</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC02_TS01_sub04_api/emw/getRegion" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="activityId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">activityId</stringProp>
                  <stringProp name="Argument.value">36b72cd6-e652-5981-830f-4af2f60290f9</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="globalClientFiscalYearId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">globalClientFiscalYearId</stringProp>
                  <stringProp name="Argument.value">${globalClientFiscalYearId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="componentTeamId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">componentTeamId</stringProp>
                  <stringProp name="Argument.value">undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/emw/getRegion</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearerToken}</stringProp>
                </elementProp>
                <elementProp name="X-Frame-Options" elementType="Header">
                  <stringProp name="Header.name">X-Frame-Options</stringProp>
                  <stringProp name="Header.value">SAMEORIGIN</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC02_TS01_sub05_api/emw/getOffices" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="activityId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">activityId</stringProp>
                  <stringProp name="Argument.value">f8cdc18a-aa2b-57b2-8aa8-085ee1ecfe9c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="globalClientFiscalYearId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">globalClientFiscalYearId</stringProp>
                  <stringProp name="Argument.value">${globalClientFiscalYearId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="componentTeamId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">componentTeamId</stringProp>
                  <stringProp name="Argument.value">undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/emw/getOffices</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearerToken}</stringProp>
                </elementProp>
                <elementProp name="X-Frame-Options" elementType="Header">
                  <stringProp name="Header.name">X-Frame-Options</stringProp>
                  <stringProp name="Header.value">SAMEORIGIN</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC02_TS01_sub06_api/globalClientFiscalYears/{{globalClientFiscalYearId}}/keyContacts/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/globalClientFiscalYears/${globalClientFiscalYearId}/keyContacts/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearerToken}</stringProp>
                </elementProp>
                <elementProp name="X-Frame-Options" elementType="Header">
                  <stringProp name="Header.name">X-Frame-Options</stringProp>
                  <stringProp name="Header.value">SAMEORIGIN</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC02_TS01_sub07_api/globalClientFiscalYears/{{globalClientFiscalYearId}}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/globalClientFiscalYears/${globalClientFiscalYearId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearerToken}</stringProp>
                </elementProp>
                <elementProp name="X-Frame-Options" elementType="Header">
                  <stringProp name="Header.name">X-Frame-Options</stringProp>
                  <stringProp name="Header.value">SAMEORIGIN</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC02_TS01_sub08_/api/globalclientfiscalyears/{{globalClientFiscalYearId}}/activities/" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;item&quot;:{&quot;activityId&quot;:&quot;${activitiesActivityId}&quot;,&quot;activityTypeId&quot;:&quot;${activityTypeId}&quot;,&quot;activityReferenceId&quot;:${activityReferenceId},&quot;name&quot;:&quot;${name}&quot;,&quot;activityCategoryId&quot;:${activityCategoryId},&quot;componentTeamId&quot;:${componentTeamId},&quot;teamName&quot;:&quot;${teamName}&quot;,&quot;globalClientFiscalYearId&quot;:&quot;${globalClientFiscalYearId}&quot;,&quot;moduleId&quot;:${moduleId},&quot;activityStatusId&quot;:${activityStatusId},&quot;sequence&quot;:${sequence},&quot;dueDate&quot;:&quot;${dueDate}&quot;,&quot;isVisible&quot;:${isVisible},&quot;module&quot;:${module},&quot;primaryAssignee&quot;:${primaryAssignee},&quot;party&quot;:${party},&quot;keyContacts&quot;:${keyContacts},&quot;assignedDateTime&quot;:&quot;${lastChangeDateTime}&quot;,&quot;totalRecords&quot;:${totalRecords},&quot;rowTimestamp&quot;:&quot;${rowTimestamp}&quot;,&quot;createDateTime&quot;:&quot;${createDateTime}&quot;,&quot;lastChangeDateTime&quot;:&quot;${lastChangeDateTime}&quot;,&quot;machineName&quot;:&quot;${machineName}&quot;,&quot;userGuid&quot;:&quot;${userGuid}&quot;,&quot;isDeleted&quot;:${isDeleted}}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/globalclientfiscalyears/${globalClientFiscalYearId}/activities/</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearerToken}</stringProp>
                </elementProp>
                <elementProp name="X-Frame-Options" elementType="Header">
                  <stringProp name="Header.name">X-Frame-Options</stringProp>
                  <stringProp name="Header.value">SAMEORIGIN</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC02_TS01_sub09_api/globalClientFiscalYears/{{globalClientFiscalYearId}}/activities/teamSetupStatuses" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${envHostname}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/globalClientFiscalYears/${globalClientFiscalYearId}/activities/teamSetupStatuses</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearerToken}</stringProp>
                </elementProp>
                <elementProp name="X-Frame-Options" elementType="Header">
                  <stringProp name="Header.name">X-Frame-Options</stringProp>
                  <stringProp name="Header.value">SAMEORIGIN</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor (${__samplerName()})" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">// Define the folowing
def threadName = prev.getThreadName()
def failureMessage = &quot;&quot;

// Restart next iteration if we fail to login
if(!&quot;200&quot;.equals(prev.getResponseCode())) {
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Expected &lt;response code&gt; [200] but instead received [&quot; + prev.getResponseCode() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  User Email=${userEmail}\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Request=[&quot; + prev.getSamplerData() + &quot;]\n&quot;
  failureMessage += &quot;[ERROR]:[&quot; + threadName + &quot;]: ${__samplerName()}:  Response=[&quot; + prev.getResponseDataAsString() + &quot;]\n&quot;
}

if (failureMessage?.trim()) {
  log.info(failureMessage)
     ctx.setRestartNextLoop(true)
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
